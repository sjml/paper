#compdef paper

autoload -U is-at-least

_paper() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'--version[Print version information and exit]' \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_paper_commands" \
"*::: :->paper" \
&& ret=0
    case $state in
    (paper)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:paper-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
':PROJECT_NAME -- The name of the directory to create for the project.:' \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(dev)
_arguments "${_arguments_options[@]}" \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" \
'-t+[The desired format of the output file]:FORMAT:(docx latex latex+pdf json)' \
'--output-format=[The desired format of the output file]:FORMAT:(docx latex latex+pdf json)' \
'--docx-revision=[Revision number for docx output format; if unset or negative, will use the number of times the project was saved.]:NUM: ' \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(save)
_arguments "${_arguments_options[@]}" \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(push)
_arguments "${_arguments_options[@]}" \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(web)
_arguments "${_arguments_options[@]}" \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(wc)
_arguments "${_arguments_options[@]}" \
'--full[Show full pre-stripped word count of each file as well.]' \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" \
'-t+[The desired format of the output file]:FORMAT:(docx latex latex+pdf json)' \
'--output-format=[The desired format of the output file]:FORMAT:(docx latex latex+pdf json)' \
'--docx-revision=[Revision number for docx output format; if unset or negative, will use the number of times the project was saved.]:NUM: ' \
'--full[Show full pre-stripped word count of each file as well.]' \
'--build[Rebuild the project before showing word count]' \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(fmt)
_arguments "${_arguments_options[@]}" \
'--columns=[The number of characters that can be in each line before wrapping.]:NUM: ' \
'--no-wrap[Do not add linebreaks to wrap the Markdown text.]' \
'-v[Spam the output log]' \
'--verbose[Spam the output log]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_paper__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:paper-help-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(dev)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(save)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(push)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(web)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(wc)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(fmt)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_paper_commands] )) ||
_paper_commands() {
    local commands; commands=(
'new:Create the scaffolding for a new writing/research project.' \
'init:While in an empty directory, set it up for a project.
(Called as part of the process for `new`.)' \
'dev:Set up a project for development work on paper itself.
Deletes the local `.paper_resources` directory and symlinks the template’s version, so changes here affect the actual program.' \
'build:Generate versions of the paper ready for submission.' \
'save:Make a git commit with some extra tracking data.' \
'push:Push local git changes to the remote repository, creating one if necessary.' \
'web:Open the remote repository’s GitHub site.' \
'wc:Print word count metrics for the project, stripping out metadata, citations, and footnotes.' \
'watch:Watches the content directory and emits new wordcount data on each change.' \
'fmt:Run an automated formatter on all the local Markdown files.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'paper commands' commands "$@"
}
(( $+functions[_paper__build_commands] )) ||
_paper__build_commands() {
    local commands; commands=()
    _describe -t commands 'paper build commands' commands "$@"
}
(( $+functions[_paper__help__build_commands] )) ||
_paper__help__build_commands() {
    local commands; commands=()
    _describe -t commands 'paper help build commands' commands "$@"
}
(( $+functions[_paper__dev_commands] )) ||
_paper__dev_commands() {
    local commands; commands=()
    _describe -t commands 'paper dev commands' commands "$@"
}
(( $+functions[_paper__help__dev_commands] )) ||
_paper__help__dev_commands() {
    local commands; commands=()
    _describe -t commands 'paper help dev commands' commands "$@"
}
(( $+functions[_paper__fmt_commands] )) ||
_paper__fmt_commands() {
    local commands; commands=()
    _describe -t commands 'paper fmt commands' commands "$@"
}
(( $+functions[_paper__help__fmt_commands] )) ||
_paper__help__fmt_commands() {
    local commands; commands=()
    _describe -t commands 'paper help fmt commands' commands "$@"
}
(( $+functions[_paper__help_commands] )) ||
_paper__help_commands() {
    local commands; commands=(
'new:Create the scaffolding for a new writing/research project.' \
'init:While in an empty directory, set it up for a project.
(Called as part of the process for `new`.)' \
'dev:Set up a project for development work on paper itself.
Deletes the local `.paper_resources` directory and symlinks the template’s version, so changes here affect the actual program.' \
'build:Generate versions of the paper ready for submission.' \
'save:Make a git commit with some extra tracking data.' \
'push:Push local git changes to the remote repository, creating one if necessary.' \
'web:Open the remote repository’s GitHub site.' \
'wc:Print word count metrics for the project, stripping out metadata, citations, and footnotes.' \
'watch:Watches the content directory and emits new wordcount data on each change.' \
'fmt:Run an automated formatter on all the local Markdown files.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'paper help commands' commands "$@"
}
(( $+functions[_paper__help__help_commands] )) ||
_paper__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'paper help help commands' commands "$@"
}
(( $+functions[_paper__help__init_commands] )) ||
_paper__help__init_commands() {
    local commands; commands=()
    _describe -t commands 'paper help init commands' commands "$@"
}
(( $+functions[_paper__init_commands] )) ||
_paper__init_commands() {
    local commands; commands=()
    _describe -t commands 'paper init commands' commands "$@"
}
(( $+functions[_paper__help__new_commands] )) ||
_paper__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'paper help new commands' commands "$@"
}
(( $+functions[_paper__new_commands] )) ||
_paper__new_commands() {
    local commands; commands=()
    _describe -t commands 'paper new commands' commands "$@"
}
(( $+functions[_paper__help__push_commands] )) ||
_paper__help__push_commands() {
    local commands; commands=()
    _describe -t commands 'paper help push commands' commands "$@"
}
(( $+functions[_paper__push_commands] )) ||
_paper__push_commands() {
    local commands; commands=()
    _describe -t commands 'paper push commands' commands "$@"
}
(( $+functions[_paper__help__save_commands] )) ||
_paper__help__save_commands() {
    local commands; commands=()
    _describe -t commands 'paper help save commands' commands "$@"
}
(( $+functions[_paper__save_commands] )) ||
_paper__save_commands() {
    local commands; commands=()
    _describe -t commands 'paper save commands' commands "$@"
}
(( $+functions[_paper__help__watch_commands] )) ||
_paper__help__watch_commands() {
    local commands; commands=()
    _describe -t commands 'paper help watch commands' commands "$@"
}
(( $+functions[_paper__watch_commands] )) ||
_paper__watch_commands() {
    local commands; commands=()
    _describe -t commands 'paper watch commands' commands "$@"
}
(( $+functions[_paper__help__wc_commands] )) ||
_paper__help__wc_commands() {
    local commands; commands=()
    _describe -t commands 'paper help wc commands' commands "$@"
}
(( $+functions[_paper__wc_commands] )) ||
_paper__wc_commands() {
    local commands; commands=()
    _describe -t commands 'paper wc commands' commands "$@"
}
(( $+functions[_paper__help__web_commands] )) ||
_paper__help__web_commands() {
    local commands; commands=()
    _describe -t commands 'paper help web commands' commands "$@"
}
(( $+functions[_paper__web_commands] )) ||
_paper__web_commands() {
    local commands; commands=()
    _describe -t commands 'paper web commands' commands "$@"
}

_paper "$@"
